package tk.freetobuild.mcunified.gui.dialogs;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import tk.freetobuild.mcunified.gui.cellrenderers.AccountCellRenderer;
import sk.tomsik68.mclauncher.api.login.IProfile;
import sk.tomsik68.mclauncher.impl.common.Platform;
import sk.tomsik68.mclauncher.impl.login.yggdrasil.YDAuthProfile;
import sk.tomsik68.mclauncher.impl.login.yggdrasil.YDProfileIO;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

public class DialogAccountManager extends JDialog {
    private JPanel contentPane;
    private JButton buttonCancel;
    public JList list1;
    public JLabel buttonAddAccount;
    public JLabel buttonRemoveAccount;
    YDProfileIO profiles;

    public DialogAccountManager() {
        setContentPane(contentPane);
        setModal(true);
        setPreferredSize(new Dimension(640, 480));
        list1.setCellRenderer(new AccountCellRenderer());
        setupButton(buttonAddAccount, this::onAdd);
        setupButton(buttonRemoveAccount, this::onDelete);
        DefaultListModel model = new DefaultListModel();
        list1.setModel(model);
        loadProfiles();
        buttonCancel.addActionListener(e -> onCancel());

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        pack();
    }

    private void loadProfiles() {
        try {
            if (new File(Platform.getCurrentPlatform().getWorkingDirectory(), "launcher_profiles.json").exists()) {
                IProfile[] profiles = new YDProfileIO(Platform.getCurrentPlatform().getWorkingDirectory()).read();
                for (IProfile profile : profiles) {
                    ((DefaultListModel) list1.getModel()).addElement(profile);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void onAdd() {
        new DialogNewAccount().setVisible(true);
        ((DefaultListModel) list1.getModel()).clear();
        loadProfiles();
    }

    public void onDelete() {
        if (!list1.isSelectionEmpty()) {
            ((DefaultListModel) list1.getModel()).remove(list1.getSelectedIndex());
            save();
        }
    }

    private void save() {
        YDAuthProfile[] profiles = new YDAuthProfile[list1.getModel().getSize()];
        File profilesFile = new File(Platform.getCurrentPlatform().getWorkingDirectory(), "launcher_profiles.json");
        if (profilesFile.exists())
            profilesFile.delete();
        if (profiles.length > 0) {
            for (int i = 0; i < profiles.length; i++) {
                profiles[i] = (YDAuthProfile) list1.getModel().getElementAt(i);
            }
            try {
                this.profiles.write(profiles);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void setupButton(JLabel label, Runnable onclick) {
        Border raisedBorder = new JButton().getBorder();
        EmptyBorder emptyBorder = new EmptyBorder(raisedBorder.getBorderInsets(label));
        label.setBorder(emptyBorder);
        label.setCursor(new Cursor(Cursor.HAND_CURSOR));
        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                super.mouseEntered(e);
                label.setBorder(raisedBorder);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                super.mouseExited(e);
                label.setBorder(emptyBorder);
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                onclick.run();
            }
        });
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Close");
        panel2.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JToolBar toolBar1 = new JToolBar();
        toolBar1.setFloatable(false);
        toolBar1.setOrientation(1);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel3.add(toolBar1, gbc);
        buttonAddAccount = new JLabel();
        buttonAddAccount.setIcon(new ImageIcon(getClass().getResource("/images/accounteditor/plus.png")));
        buttonAddAccount.setText("");
        toolBar1.add(buttonAddAccount);
        buttonRemoveAccount = new JLabel();
        buttonRemoveAccount.setIcon(new ImageIcon(getClass().getResource("/images/accounteditor/minus.png")));
        buttonRemoveAccount.setText("");
        toolBar1.add(buttonRemoveAccount);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(scrollPane1, gbc);
        list1 = new JList();
        list1.setBackground(new Color(-12302519));
        scrollPane1.setViewportView(list1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
